{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Run dev-tools image",
            "type": "shell",
            // Checks if a container with the name ${config:container_name} exists, and if it does, it is stopped and removed before a new container is created using the same name and other specified configuration parameters
            "linux" : {
                "command": "docker ps -a --format '{{.Names}}' | grep -q ${config:container_name} && (docker container stop ${config:container_name} && docker container rm ${config:container_name}) ; docker pull ${config:docker_image} && docker run --user $(id -u):$(id -g) --privileged -e DISPLAY=$DISPLAY -v '/dev/bus/usb:/dev/bus/usb' -v '/tmp/.X11-unix:/tmp/.X11-unix' -v '${workspaceFolder}:/app' -t -d --name ${config:container_name} ${config:docker_image}",
            },
            "windows" : {
                "command": "if (docker ps -a --format '{{.Names}}' | Select-String -Quiet ${config:container_name}) { docker container stop ${config:container_name}; docker container rm ${config:container_name} }; docker pull ${config:docker_image}; docker run --privileged -e DISPLAY='host.docker.internal:0' -v '${workspaceFolder}:/app' -t -d --name ${config:container_name} ${config:docker_image} ",
            },
            "osx" : {
                "command": "xhost + ; docker ps -a --format '{{.Names}}' | grep -q ${config:container_name} && (docker container stop ${config:container_name} && docker container rm ${config:container_name}) ; docker pull ${config:docker_image} && docker run --user $(id -u):$(id -g) --privileged -e DISPLAY='host.docker.internal:0' -v '/tmp/.X11-unix:/tmp/.X11-unix' -v '${workspaceFolder}:/app' -t -d --name ${config:container_name} ${config:docker_image}",
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Open dev-tools container terminal",
            "type": "shell",
            // Opens a terminal of the dev-tools container.
            "command": "docker exec -it ${config:container_name} bash",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Build app",
            "type": "shell",
            // Builds the app in release mode using the make command, inside the docker container.
            "command": "docker exec -it ${config:container_name} bash -c 'export BOLOS_SDK=$(echo ${input:sdk}) && make -j'",
            "group": {
                "kind": "build",
                "isDefault": true
            }, 
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Build app [debug]",
            "type": "shell",
            // Builds the app with debug mode enabled using the make command, inside the docker container.
            "command": "docker exec -it ${config:container_name} bash -c 'export BOLOS_SDK=$(echo ${input:sdk}) && make -j DEBUG=1' && cp bin/app.elf tests/elfs/klaytn_${input:model}.elf",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Clean build files",
            "type": "shell",
            // Cleans all app build files (for all device models).
            "command": "docker exec -it ${config:container_name} bash -c 'make clean'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [
                "$gcc"
            ]
        },
        {
            "label": "Generate screenshots to validate test (golden run)",
            "type": "shell",
            // Runs functional tests inside the docker container (with Qt display disabled) and save screenshots.
            "command": "docker exec -it ${config:container_name} bash -c 'pytest tests/python/ --tb=short -v --device ${input:model} --golden_run'",
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Run functional tests (without logs)",
            "type": "shell",
            // Runs functional tests inside the docker container (with Qt display disabled).
            "command": "docker exec -it ${config:container_name} bash -c 'pytest tests/python/ --tb=short -v --device ${input:model}'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [],
            "dependsOn": [
                "Install tests requirements",

            ]
        },
        {
            "label": "Run functional tests (with logs)",
            "type": "shell",
            // Runs functional tests inside the docker container (with Qt display disabled).
            "command": "docker exec -it ${config:container_name} bash -c 'pytest -s tests/python/ --tb=short -v --device ${input:model}'",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": [],
            "dependsOn": [
                "Install tests requirements"
            ]
        },
        {
            "label": "Load app on device",
            "type": "shell",
            "linux" : {
                // Executes make load in the container to load the app on a physical device.
                "command": "docker exec -it ${config:container_name} bash -c 'export BOLOS_SDK=$(echo ${input:sdk}) && make load'",
            },
            "windows" : {
                // Side loads the app APDU file using ledgerblue runScript.
                "command": "cmd.exe /C '.\\ledger\\Scripts\\activate.bat && python -m ledgerblue.runScript --scp --fileName ${config:buid_dir_relative_path}/bin/app.apdu --elfFile ${config:buid_dir_relative_path}/bin/app.elf'",
            },
            "osx" : {
                // Side loads the app APDU file using ledgerblue runScript.
                "command": "source ledger/bin/activate && python3 -m ledgerblue.runScript --scp --fileName ${config:buid_dir_relative_path}/bin/app.apdu --elfFile ${config:buid_dir_relative_path}/bin/app.elf",
            },
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "dependsOn": [
                "Install app loading requirements",
                "Build app"
            ],
            "problemMatcher": []
        },
        // ------------------------------------------------------------------------------
        // Helper tasks put in 'test' group so they are hidden from the build tasks menu.
        // ------------------------------------------------------------------------------
        {
            "label": "Install app loading requirements",
            "type": "shell",
            "linux" : {
                // Copies the ledger udev rule file to the /etc/udev/rules.d/ directory if it does not exist, then reloads the rules and triggers udev.
                "command": "if [ ! -f '/etc/udev/rules.d/${config:linux_udev_ledgerblue_rule_file}' ]; then sudo cp .vscode/${config:linux_udev_ledgerblue_rule_file} /etc/udev/rules.d/ && sudo udevadm control --reload-rules && sudo udevadm trigger; fi",
            },
            "windows" : {
                // Checks that virtual env is installed, otherwise installs it. Then installs ledgerblue in a virtualenv.
                "command": "cmd.exe /C 'if not exist ledger (python -m pip install virtualenv && python -m venv ledger && call ledger\\Scripts\\activate.bat && python -m pip install ledgerblue)'",
            },
            "osx" : {
                // Checks that virtual env is installed, otherwise installs it. Then installs ledgerblue in a virtualenv.
                "command": "[ -n '$VIRTUAL_ENV' ] || if ! python3 -m virtualenv --version >/dev/null 2>&1; then python3 -m pip install virtualenv; fi && [ -d 'ledger' ] || python3 -m virtualenv ledger && source ledger/bin/activate && python3 -m pip show ledgerblue >/dev/null 2>&1 || python3 -m pip install ledgerblue",
            },
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Install tests requirements",
            "type": "shell",
            // Installs functional tests python requirements in the docker container.
            "command":"docker exec -it -u 0 ${config:container_name} bash -c 'apk add gcc musl-dev python3-dev && pip install -r tests/python/requirements.txt'",
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "problemMatcher": []
        },
        {
            "label": "Copy app.elf from bin to test/elfs directory",
            "type": "shell",
            // Copies the app.elf file from bin to the tests/elfs directory with the name klaytn_{input:model}.elf.
            "linux": {
                "command": "cp bin/app.elf tests/elfs/klaytn_${input:model}.elf",
            },
            "windows": {
                "command": "cmd.exe /C 'copy bin\\app.elf tests\\elfs\\klaytn_${input:model}.elf'",
            },
            "osx": {
                "command": "cp bin/app.elf tests/elfs/klaytn_${input:model}.elf",
            },
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "problemMatcher": [],
            "dependsOn": [
                "Build app"
            ]
        },
    ],
    "inputs": [
        {
            "id" : "sdk",                
            "type": "pickString",
            "description": "Choose a SDK to build with",
            "options": [
                "$NANOSP_SDK",
                "$NANOS_SDK",
                "$NANOX_SDK"
            ]
        },
        {
            "id" : "model",
            "type": "pickString",
            "description": "Which model to run speculos for ?",
            "options": [
                "nanosp",
                "nanos",
                "nanox"
            ]
        }
    ]
}